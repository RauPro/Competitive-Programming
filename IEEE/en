Solve this competitive programming problem, take care, this is not a greedy and kadane problem, this requieries a more elaborated strategy
---

**Memory limit**: 512 MB

Given an integer array **A** (1-indexed) with even length **n**, you can do the following operation as many times as you want:

- Choose a pair of positions **2k - 1** and **2k** and multiply both **A[2k-1]** and **A[2k]** by **-1**.

After finishing your operations, you must compute the maximum subarray sum of the resulting array. Maximize this value.

**Standard input**
The first line contains an integer **T**, the number of test cases.
The following lines describe **T** test cases.
The first line of each test case contains an even integer **N_i**, the length of the array.
The second line contains **N_i** integers **A_j**, where the **j**-th integer is the **j**-th element of the array.

**Standard output**
Print **T** lines, where the **i**-th line must contain the answer to the **i**-th test case.

**Constraints and notes**
- **1 ≤ T ≤ 10^5**
- **1 ≤ Σ N_i ≤ 4 * 10^5**
- **2 ≤ N_i ≤ 2 * 10^5** for every **i = 1, …, T**
- **N_i** is even for every **i = 1, …, T**
- **|A_j| ≤ 10^4** for every valid **j**

**Example**

**Input**
```
3
4
5 -10 7 -2
2
7 -8
2
5 4
```

**Output**
```
17
8
9
```

**Explanation**

- For the first test case, it’s possible to apply the operation on position 2, which gives the array **[-5, 10, 7, -2]** and its maximum subarray sum is **10 + 7 = 17**.
- For the second test case, it’s possible to apply the operation on position 2, which gives the array **[-7, 8]** and its maximum subarray sum is **8**.
- For the third test case, there is no need to apply the operation since all the values are positive, so the maximum subarray sum is **5 + 4 = 9**.